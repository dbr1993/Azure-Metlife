{    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",    "contentVersion": "1.0.0.0",  "parameters": {    "MasterNodeNames": {      "type": "array",      "metadata": {        "description": "List of Master Node Names"      }    },    "MasterNodeVMSize": {      "type": "string",      "allowedValues": [        "Standard_DS2_v2",        "Standard_DS12_v2",        "Standard_DS13_v2"      ]    },    "DTRNodeNames": {      "type": "array",      "metadata": {        "description": "List of DTR Node Names"      }    },    "DTRNodeVMSize": {      "type": "string",      "allowedValues": [        "Standard_DS2_v2",        "Standard_DS12_v2",        "Standard_DS13_v2"      ]    },    "WorkerNodeNames": {      "type": "array",     "metadata": {        "description": "List of Default Worker Node Names"      }    },    "WorkerNodeVMSize": {      "type": "string",      "allowedValues": [        "Standard_DS2_v2",        "Standard_DS12_v2",        "Standard_DS13_v2"      ]    },    "WorkerNodeMongoNames": {      "type": "array",      "metadata": {        "description": "List of Mongo Worker Node Names"      }    },    "WorkerNodewMongoVMSize": {      "type": "string",      "allowedValues": [        "Standard_DS2_v2",        "Standard_DS12_v2",        "Standard_DS13_v2"      ]    },    "WorkerNodeSplunkNames": {      "type": "array",      "metadata": {        "description": "List of Splunk Worker Node Names"      }    },    "WorkerNodewSplunkVMSize": {      "type": "string",      "allowedValues": [        "Standard_DS2_v2",        "Standard_DS12_v2",        "Standard_DS13_v2"      ]    },    "existingVirtualNetworkName": {      "type": "string",      "metadata": {        "description": "Name of the existing VNet"      }    },    "existingVirtualNetworkResourceGroup": {      "type": "string",      "metadata": {        "description": "Name of the Resource Group containing the existing VNet"      }    },    "existingSubnetName": {      "type": "string",      "metadata": {        "description": "Name of the subnet in the VNet you want to use"      }    },    "EAICODE": {      "type": "string",      "metadata": {        "description": "EAICODE Number"      }    },    "Environment": {      "type": "string",      "metadata": {        "description": ""      }    },    "OSVersion": {      "type": "string",      "defaultValue": "7.2",      "allowedValues": [        "7.2",        "6.8",        "6.7"      ],      "metadata": {        "description": "The OS version for the VM. This will pick the latest available image of this given OS version."      }    }  },  "variables": {    "numMasterNodes": "[length(parameters('MasterNodeNames'))]",    "numDTRNodes": "[length(parameters('DTRNodeNames'))]",    "numWorkerNodes": "[length(parameters('WorkerNodeNames'))]",    "numWorkerNodeswMongo": "[length(parameters('WorkerNodeMongoNames'))]",    "numWorkerNodeswSplunk": "[length(parameters('WorkerNodeSplunkNames'))]",    "masterNodeStorageAccountName": "[toLower(concat(parameters('EAICODE'), 'docker', parameters('Environment'), 'master01'))]",    "workerNodeStorageAccountName": "[toLower(concat(parameters('EAICODE'), 'docker', parameters('Environment'), 'worker01'))]",    "DiagStorageAccountName": "[toLower(concat(parameters('EAICODE'), 'docker', parameters('Environment'), 'diag01'))]",    "masterAvailablitySetName": "[toUpper(concat(parameters('EAICODE'), 'DOCKER', parameters('Environment'), '-MASTER-AS'))]",    "workerAvailablitySetName": "[toUpper(concat(parameters('EAICODE'), 'DOCKER', parameters('Environment'), '-WORKER-AS'))]",    "DefaultPostScript": "AzureMetPost",    "MongoPostScript": "PostPostwMongo",    "SplunkPostScript":  "PostPostwSplunk",    "NodeStartIndex": 0,    "imagePublisher": "RedHat",    "imageOffer": "RHEL",    "apiVersion": "2015-06-15",    "dataDiskSize": "60",    "osDiskSize": "64",    "vnetID": "[resourceId(parameters('existingVirtualNetworkResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('existingVirtualNetworkName'))]",    "subnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('existingSubnetName'))]",    "nodeStorageAccountType": "Standard_LRS",    "DiagStorageAccountType": "Standard_LRS",    "vmStorageAccountContainerName": "vhds",    "adminUsername": "mladmin",    "adminPassword": "MetLife0001!",    "scriptStorageAccount": "mltemplatestore",    "scriptStorageAccountKey": "FhA478ObCyW+E0pc4HJV9h3ekaHcaS7yiyd7M4yYGJ4oHMB0GYdAWa01avW7K8IiPK20gy8Jkj5+GaE5ojvnmQ=="  },  "resources": [    {      "comments": "Master Nodes Storage Account",      "type": "Microsoft.Storage/storageAccounts",      "name": "[variables('masterNodeStorageAccountName')]",      "apiVersion": "[variables('apiVersion')]",      "location": "[resourceGroup().location]",      "properties": {        "accountType": "[variables('nodestorageAccountType')]"      }    },    {      "comments": "Worker Nodes Storage Account",      "type": "Microsoft.Storage/storageAccounts",      "name": "[variables('workerNodeStorageAccountName')]",      "apiVersion": "[variables('apiVersion')]",      "location": "[resourceGroup().location]",      "properties": {        "accountType": "[variables('nodestorageAccountType')]"      }    },    {      "comments": "Diagnostics Storage Account",      "type": "Microsoft.Storage/storageAccounts",      "name": "[variables('DiagStorageAccountName')]",      "apiVersion": "[variables('apiVersion')]",      "location": "[resourceGroup().location]",      "properties": {        "accountType": "[variables('DiagStorageAccountType')]"      }    },    {      "comments": "# Master Node Availability Set",      "type": "Microsoft.Compute/availabilitySets",      "name": "[variables('masterAvailablitySetName')]",      "apiVersion": "2015-06-15",      "tags": {        "EAICODE": "00000"      },      "location": "[resourceGroup().location]",      "properties": {        "platformFaultDomainCount": 3,        "platformUpdateDomainCount": 9      }    },    {      "comments": "# Worker Node Availability Set",      "type": "Microsoft.Compute/availabilitySets",      "name": "[variables('workerAvailablitySetName')]",      "apiVersion": "2015-06-15",      "tags": {        "EAICODE": "00000"      },      "location": "[resourceGroup().location]",      "properties": {        "platformFaultDomainCount": 3,        "platformUpdateDomainCount": 18      }    },    {      "comments": "Nics for Master Nodes",      "apiVersion": "[variables('apiVersion')]",      "type": "Microsoft.Network/networkInterfaces",      "tags": {        "EAICODE": "00000"      },      "name": "[concat(parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '-NIC')]",      "location": "[resourceGroup().location]",      "copy": {        "name": "createMasterNodeNICs",        "count": "[variables('numMasterNodes')]"      },      "location": "[resourceGroup().location]",      "properties": {        "dnsSettings": {          "dnsServers": [            "172.24.225.21",            "172.24.161.56",            "172.24.97.34",            "172.24.33.31"          ],          "domainNameLabel": "metlife.com"        },        "ipConfigurations": [          {            "name": "IPConfig",            "properties": {              "privateIPAllocationMethod": "Dynamic",              "subnet": {                "id": "[variables('subnetRef')]"              }            }          }        ]      }    },    {      "comments": "Nics for DTR Nodes",      "apiVersion": "[variables('apiVersion')]",      "type": "Microsoft.Network/networkInterfaces",      "tags": {        "EAICODE": "00000"      },      "name": "[concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-NIC')]",      "location": "[resourceGroup().location]",      "copy": {        "name": "createDTRNodeNICs",        "count": "[variables('numDTRNodes')]"      },      "location": "[resourceGroup().location]",      "properties": {        "dnsSettings": {          "dnsServers": [            "172.24.225.21",            "172.24.161.56",            "172.24.97.34",            "172.24.33.31"          ],          "domainNameLabel": "metlife.com"        },        "ipConfigurations": [          {            "name": "IPConfig",            "properties": {              "privateIPAllocationMethod": "Dynamic",              "subnet": {                "id": "[variables('subnetRef')]"              }            }          }        ]      }    },    {      "comments": "Nics for Worker Nodes",      "apiVersion": "[variables('apiVersion')]",      "type": "Microsoft.Network/networkInterfaces",      "tags": {        "EAICODE": "00000"      },      "name": "[concat(parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))], '-NIC')]",      "location": "[resourceGroup().location]",      "copy": {        "name": "createWorkerNodeNICs",        "count": "[variables('numWorkerNodes')]"      },      "location": "[resourceGroup().location]",      "properties": {        "dnsSettings": {          "dnsServers": [            "172.24.225.21",            "172.24.161.56",            "172.24.97.34",            "172.24.33.31"          ],          "domainNameLabel": "metlife.com"        },        "ipConfigurations": [          {            "name": "IPConfig",            "properties": {              "privateIPAllocationMethod": "Dynamic",              "subnet": {                "id": "[variables('subnetRef')]"              }            }          }        ]      }    },    {      "comments": "Nics for Worker Nodes with Mongo",      "apiVersion": "[variables('apiVersion')]",      "type": "Microsoft.Network/networkInterfaces",      "tags": {        "EAICODE": "00000"      },      "name": "[concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-NIC')]",      "location": "[resourceGroup().location]",      "copy": {        "name": "createWorkerNodewMongoNICs",        "count": "[variables('numWorkerNodeswMongo')]"      },      "location": "[resourceGroup().location]",      "properties": {        "dnsSettings": {          "dnsServers": [            "172.24.225.21",            "172.24.161.56",            "172.24.97.34",            "172.24.33.31"          ],          "domainNameLabel": "metlife.com"        },        "ipConfigurations": [          {            "name": "IPConfig",            "properties": {              "privateIPAllocationMethod": "Dynamic",              "subnet": {                "id": "[variables('subnetRef')]"              }            }          }        ]      }    },    {      "comments": "Nics for Worker Nodes with Splunk",      "apiVersion": "[variables('apiVersion')]",      "type": "Microsoft.Network/networkInterfaces",      "tags": {        "EAICODE": "00000"      },      "name": "[concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-NIC')]",      "location": "[resourceGroup().location]",      "copy": {        "name": "createWorkerNodewSplunkNICs",        "count": "[variables('numWorkerNodeswSplunk')]"      },      "location": "[resourceGroup().location]",      "properties": {        "dnsSettings": {          "dnsServers": [            "172.24.225.21",            "172.24.161.56",            "172.24.97.34",            "172.24.33.31"          ],          "domainNameLabel": "metlife.com"        },        "ipConfigurations": [          {            "name": "IPConfig",            "properties": {              "privateIPAllocationMethod": "Dynamic",              "subnet": {                "id": "[variables('subnetRef')]"              }            }          }        ]      }    },    {      "comments": "Master Nodes",      "apiVersion": "[variables('apiVersion')]",      "type": "Microsoft.Compute/virtualMachines",      "tags": {        "EAICODE": "00000"      },      "name": "[concat(parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))])]",      "copy": {        "name": "createMasterNodes",        "count": "[variables('numMasterNodes')]"      },      "location": "[resourceGroup().location]",      "dependsOn": [        "[concat('Microsoft.Storage/storageAccounts/', variables('masterNodeStorageAccountName'))]",        "[concat('Microsoft.Storage/storageAccounts/', variables('DiagStorageAccountName'))]",        "[concat('Microsoft.Compute/availabilitySets/', variables('masterAvailablitySetName'))]",        "[resourceId('Microsoft.Network/networkInterfaces/', concat(parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '-NIC'))]"      ],      "properties": {        "availabilitySet": {          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(variables('masterAvailablitySetName')))]"        },        "hardwareProfile": {          "vmSize": "[parameters('MasterNodeVMSize')]"        },        "osProfile": {          "computerName": "[concat(parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))])]",          "adminUsername": "[variables('adminUsername')]",          "adminPassword": "[variables('adminPassword')]"        },        "storageProfile": {          "imageReference": {            "publisher": "[variables('imagePublisher')]",            "offer": "[variables('imageOffer')]",            "sku": "[parameters('OSVersion')]",            "version": "latest"          },          "osDisk": {            "name": "[concat(parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '-OSDISK')]",            "diskSizeGB": "[variables('osDiskSize')]",            "vhd": {              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('masterNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '-OSDISK.vhd')]"            },            "caching": "ReadWrite",            "createOption": "FromImage"          },          "dataDisks": [            {              "name": "[concat(parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK0')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 0,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('masterNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK0.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK1')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 1,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('masterNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK1.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK2')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 2,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('masterNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK2.vhd')]"              },              "createOption": "Empty"            }          ]        },        "networkProfile": {          "networkInterfaces": [            {              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '-NIC'))]"            }          ]        },        "diagnosticsProfile": {          "bootDiagnostics": {            "enabled": "true",            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('DiagStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob]"          }        }      }    },    {      "comments": "Custom Extension for Master Nodes",      "type": "Microsoft.Compute/virtualMachines/extensions",      "name": "[concat(parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))], '/', variables('DefaultPostScript'))]",      "copy": {        "name": "ApplyCustomExtensionWorkerNodes",        "count": "[variables('numWorkerNodes')]"      },      "apiVersion": "[variables('apiVersion')]",      "location": "[resourceGroup().location]",      "dependsOn": [        "[concat('Microsoft.Compute/virtualMachines/', concat(parameters('MasterNodeNames')[copyIndex(variables('NodeStartIndex'))]))]"      ],      "properties": {        "publisher": "Microsoft.OSTCExtensions",        "type": "CustomScriptForLinux",        "typeHandlerVersion": "1.5",        "autoUpgradeMinorVersion": true,        "settings": {          "fileUris": [            "[concat('https://', variables('scriptStorageAccount'), '.blob.core.windows.net/ml-rhel/scripts', '/', variables('DefaultPostScript'), '.sh')]"          ],          "commandToExecute": "[concat('sh ', variables('DefaultPostScript'), '.sh')]"        },        "protectedSettings": {          "storageAccountName": "[variables('scriptStorageAccount')]",          "storageAccountKey": "[variables('scriptStorageAccountKey')]"        }      }    },    {      "comments": "DTR Nodes",      "apiVersion": "[variables('apiVersion')]",      "type": "Microsoft.Compute/virtualMachines",      "tags": {        "EAICODE": "00000"      },      "name": "[concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))])]",      "copy": {        "name": "createMasterNodes",        "count": "[variables('numDTRNodes')]"      },      "location": "[resourceGroup().location]",      "dependsOn": [        "[concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName'))]",        "[concat('Microsoft.Storage/storageAccounts/', variables('DiagStorageAccountName'))]",        "[concat('Microsoft.Compute/availabilitySets/', variables('workerAvailablitySetName'))]",        "[resourceId('Microsoft.Network/networkInterfaces/', concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-NIC'))]"      ],      "properties": {        "availabilitySet": {          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(variables('workerAvailablitySetName')))]"        },        "hardwareProfile": {          "vmSize": "[parameters('DTRNodeVMSize')]"        },        "osProfile": {          "computerName": "[concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))])]",          "adminUsername": "[variables('adminUsername')]",          "adminPassword": "[variables('adminPassword')]"        },        "storageProfile": {          "imageReference": {            "publisher": "[variables('imagePublisher')]",            "offer": "[variables('imageOffer')]",            "sku": "[parameters('OSVersion')]",            "version": "latest"          },          "osDisk": {            "name": "[concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-OSDISK')]",            "diskSizeGB": "[variables('osDiskSize')]",            "vhd": {              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-OSDISK.vhd')]"            },            "caching": "ReadWrite",            "createOption": "FromImage"          },          "dataDisks": [            {              "name": "[concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK0')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 0,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK0.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK1')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 1,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK1.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK2')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 2,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK2.vhd')]"              },              "createOption": "Empty"            }          ]        },        "networkProfile": {          "networkInterfaces": [            {              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-NIC'))]"            }          ]        },        "diagnosticsProfile": {          "bootDiagnostics": {            "enabled": "true",            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('DiagStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob]"          }        }      }    },    {      "comments": "Custom Extension for DTR Nodes",      "type": "Microsoft.Compute/virtualMachines/extensions",      "name": "[concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '/', variables('DefaultPostScript'))]",      "copy": {        "name": "ApplyCustomExtensionWorkerNodes",        "count": "[variables('numDTRNodes')]"      },      "apiVersion": "[variables('apiVersion')]",      "location": "[resourceGroup().location]",      "dependsOn": [        "[concat('Microsoft.Compute/virtualMachines/', concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))]))]"      ],      "properties": {        "publisher": "Microsoft.OSTCExtensions",        "type": "CustomScriptForLinux",        "typeHandlerVersion": "1.5",        "autoUpgradeMinorVersion": true,        "settings": {          "fileUris": [            "[concat('https://', variables('scriptStorageAccount'), '.blob.core.windows.net/ml-rhel/scripts', '/', variables('DefaultPostScript'), '.sh')]"          ],          "commandToExecute": "[concat('sh ', variables('DefaultPostScript'), '.sh')]"        },        "protectedSettings": {          "storageAccountName": "[variables('scriptStorageAccount')]",          "storageAccountKey": "[variables('scriptStorageAccountKey')]"        }      }    },    {      "comments": "Worker Nodes",      "apiVersion": "[variables('apiVersion')]",      "type": "Microsoft.Compute/virtualMachines",      "tags": {        "EAICODE": "00000"      },      "name": "[concat(parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))])]",      "copy": {        "name": "createMasterNodes",        "count": "[variables('numWorkerNodes')]"      },      "location": "[resourceGroup().location]",      "dependsOn": [        "[concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName'))]",        "[concat('Microsoft.Storage/storageAccounts/', variables('DiagStorageAccountName'))]",        "[concat('Microsoft.Compute/availabilitySets/', variables('workerAvailablitySetName'))]",        "[resourceId('Microsoft.Network/networkInterfaces/', concat(parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))], '-NIC'))]"      ],      "properties": {        "availabilitySet": {          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(variables('workerAvailablitySetName')))]"        },        "hardwareProfile": {          "vmSize": "[parameters('WorkerNodeVMSize')]"        },        "osProfile": {          "computerName": "[concat(parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))])]",          "adminUsername": "[variables('adminUsername')]",          "adminPassword": "[variables('adminPassword')]"        },        "storageProfile": {          "imageReference": {            "publisher": "[variables('imagePublisher')]",            "offer": "[variables('imageOffer')]",            "sku": "[parameters('OSVersion')]",            "version": "latest"          },          "osDisk": {            "name": "[concat(parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))], '-OSDISK')]",            "diskSizeGB": "[variables('osDiskSize')]",            "vhd": {              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))], '-OSDISK.vhd')]"            },            "caching": "ReadWrite",            "createOption": "FromImage"          },          "dataDisks": [            {              "name": "[concat(parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK0')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 0,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK0.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK1')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 1,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK1.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK2')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 2,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK2.vhd')]"              },              "createOption": "Empty"            }          ]        },        "networkProfile": {          "networkInterfaces": [            {              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('DTRNodeNames')[copyIndex(variables('NodeStartIndex'))], '-NIC'))]"            }          ]        },        "diagnosticsProfile": {          "bootDiagnostics": {            "enabled": "true",            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('DiagStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob]"          }        }      }    },    {      "comments": "Custom Extension for Work Nodes",      "type": "Microsoft.Compute/virtualMachines/extensions",      "name": "[concat(parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))], '/', variables('DefaultPostScript'))]",      "copy": {        "name": "ApplyCustomExtensionWorkerNodes",        "count": "[variables('numWorkerNodes')]"      },      "apiVersion": "[variables('apiVersion')]",      "location": "[resourceGroup().location]",      "dependsOn": [        "[concat('Microsoft.Compute/virtualMachines/', concat(parameters('WorkerNodeNames')[copyIndex(variables('NodeStartIndex'))]))]"      ],      "properties": {        "publisher": "Microsoft.OSTCExtensions",        "type": "CustomScriptForLinux",        "typeHandlerVersion": "1.5",        "autoUpgradeMinorVersion": true,        "settings": {          "fileUris": [            "[concat('https://', variables('scriptStorageAccount'), '.blob.core.windows.net/ml-rhel/scripts', '/', variables('DefaultPostScript'), '.sh')]"          ],          "commandToExecute": "[concat('sh ', variables('DefaultPostScript'), '.sh')]"        },        "protectedSettings": {          "storageAccountName": "[variables('scriptStorageAccount')]",          "storageAccountKey": "[variables('scriptStorageAccountKey')]"        }      }    },    {      "comments": "Worker Nodes with Mongo",      "apiVersion": "[variables('apiVersion')]",      "type": "Microsoft.Compute/virtualMachines",      "tags": {        "EAICODE": "00000"      },      "name": "[concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))])]",      "copy": {        "name": "createMasterNodes",        "count": "[variables('numWorkerNodeswMongo')]"      },      "location": "[resourceGroup().location]",      "dependsOn": [        "[concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName'))]",        "[concat('Microsoft.Storage/storageAccounts/', variables('DiagStorageAccountName'))]",        "[concat('Microsoft.Compute/availabilitySets/', variables('workerAvailablitySetName'))]",        "[resourceId('Microsoft.Network/networkInterfaces/', concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-NIC'))]"      ],      "properties": {        "availabilitySet": {          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(variables('workerAvailablitySetName')))]"        },        "hardwareProfile": {          "vmSize": "[parameters('WorkerNodewMongoVMSize')]"        },        "osProfile": {          "computerName": "[concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))])]",          "adminUsername": "[variables('adminUsername')]",          "adminPassword": "[variables('adminPassword')]"        },        "storageProfile": {          "imageReference": {            "publisher": "[variables('imagePublisher')]",            "offer": "[variables('imageOffer')]",            "sku": "[parameters('OSVersion')]",            "version": "latest"          },          "osDisk": {            "name": "[concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-OSDISK')]",            "diskSizeGB": "[variables('osDiskSize')]",            "vhd": {              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-OSDISK.vhd')]"            },            "caching": "ReadWrite",            "createOption": "FromImage"          },          "dataDisks": [            {              "name": "[concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK0')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 0,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK0.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK1')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 1,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK1.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK2')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 2,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK2.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK3')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 3,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK3.vhd')]"              },              "createOption": "Empty",              "caching": "ReadWrite"            }          ]        },        "networkProfile": {          "networkInterfaces": [            {              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '-NIC'))]"            }          ]        },        "diagnosticsProfile": {          "bootDiagnostics": {            "enabled": "true",            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('DiagStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob]"          }        }      }    },    {      "comments": "Custom Extension for Work Nodes with Mongo",      "type": "Microsoft.Compute/virtualMachines/extensions",      "name": "[concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))], '/', variables('MongoPostScript'))]",      "copy": {        "name": "ApplyCustomExtensionMongoNodes",        "count": "[variables('numWorkerNodeswMongo')]"      },      "apiVersion": "[variables('apiVersion')]",      "location": "[resourceGroup().location]",      "dependsOn": [        "[concat('Microsoft.Compute/virtualMachines/', concat(parameters('WorkerNodeMongoNames')[copyIndex(variables('NodeStartIndex'))]))]"      ],      "properties": {        "publisher": "Microsoft.OSTCExtensions",        "type": "CustomScriptForLinux",        "typeHandlerVersion": "1.5",        "autoUpgradeMinorVersion": true,        "settings": {          "fileUris": [            "[concat('https://', variables('scriptStorageAccount'), '.blob.core.windows.net/ml-rhel/scripts', '/', variables('MongoPostScript'), '.sh')]"          ],          "commandToExecute": "[concat('sh ', variables('MongoPostScript'), '.sh')]"        },        "protectedSettings": {          "storageAccountName": "[variables('scriptStorageAccount')]",          "storageAccountKey": "[variables('scriptStorageAccountKey')]"        }      }    },    {      "comments": "Worker Nodes with Splunk",      "apiVersion": "[variables('apiVersion')]",      "type": "Microsoft.Compute/virtualMachines",      "tags": {        "EAICODE": "00000"      },      "name": "[concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))])]",      "copy": {        "name": "createMasterNodes",        "count": "[variables('numWorkerNodeswSplunk')]"      },      "location": "[resourceGroup().location]",      "dependsOn": [        "[concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName'))]",        "[concat('Microsoft.Storage/storageAccounts/', variables('DiagStorageAccountName'))]",        "[concat('Microsoft.Compute/availabilitySets/', variables('workerAvailablitySetName'))]",        "[resourceId('Microsoft.Network/networkInterfaces/', concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-NIC'))]"      ],      "properties": {        "availabilitySet": {          "id": "[resourceId('Microsoft.Compute/availabilitySets', concat(variables('workerAvailablitySetName')))]"        },        "hardwareProfile": {          "vmSize": "[parameters('WorkerNodewSplunkVMSize')]"        },        "osProfile": {          "computerName": "[concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))])]",          "adminUsername": "[variables('adminUsername')]",          "adminPassword": "[variables('adminPassword')]"        },        "storageProfile": {          "imageReference": {            "publisher": "[variables('imagePublisher')]",            "offer": "[variables('imageOffer')]",            "sku": "[parameters('OSVersion')]",            "version": "latest"          },          "osDisk": {            "name": "[concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-OSDISK')]",            "diskSizeGB": "[variables('osDiskSize')]",            "vhd": {              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-OSDISK.vhd')]"            },            "caching": "ReadWrite",            "createOption": "FromImage"          },          "dataDisks": [            {              "name": "[concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK0')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 0,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK0.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK1')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 1,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK1.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK2')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 2,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK2.vhd')]"              },              "createOption": "Empty"            },            {              "name": "[concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK3')]",              "diskSizeGB": "[variables('dataDiskSize')]",              "lun": 3,              "vhd": {                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('workerNodeStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-DATADISK3.vhd')]"              },              "createOption": "Empty",              "caching": "ReadWrite"            }          ]        },        "networkProfile": {          "networkInterfaces": [            {              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '-NIC'))]"            }          ]        },        "diagnosticsProfile": {          "bootDiagnostics": {            "enabled": "true",            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('DiagStorageAccountName')), variables('apiVersion')).primaryEndpoints.blob]"          }        }      }    },    {      "comments": "Custom Extension for Work Nodes with Splunk",      "type": "Microsoft.Compute/virtualMachines/extensions",      "name": "[concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))], '/', variables('SplunkPostScript'))]",      "copy": {        "name": "ApplyCustomExtensionSplunkNodes",        "count": "[variables('numWorkerNodeswSplunk')]"      },      "apiVersion": "[variables('apiVersion')]",      "location": "[resourceGroup().location]",      "dependsOn": [        "[concat('Microsoft.Compute/virtualMachines/', concat(parameters('WorkerNodeSplunkNames')[copyIndex(variables('NodeStartIndex'))]))]"      ],      "properties": {        "publisher": "Microsoft.OSTCExtensions",        "type": "CustomScriptForLinux",        "typeHandlerVersion": "1.5",        "autoUpgradeMinorVersion": true,        "settings": {          "fileUris": [            "[concat('https://', variables('scriptStorageAccount'), '.blob.core.windows.net/ml-rhel/scripts', '/', variables('SplunkPostScript'), '.sh')]"          ],          "commandToExecute": "[concat('sh ', variables('SplunkPostScript'), '.sh')]"        },        "protectedSettings": {          "storageAccountName": "[variables('scriptStorageAccount')]",          "storageAccountKey": "[variables('scriptStorageAccountKey')]"           }      }    }     ],  "outputs": {"masterip": {      "value": "[reference(concat(variables('nicName'),0)).ipConfigurations[0].properties.privateIPAddress]",      "type": "string"    }  }}
